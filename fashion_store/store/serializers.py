from django.contrib.auth import get_user_model
from rest_framework import serializers , viewsets
from .models import Product, Category, Cart, CartItem, Order, OrderItem, Payment
from django.contrib.auth.password_validation import validate_password
from django.db.models import Sum


User = get_user_model()  # L·∫•y model User ƒë√∫ng

# ‚úÖ API c·ªßa ng∆∞·ªùi d√πngUser = get_user_model()  # L·∫•y model User m·ªü r·ªông c·ªßa b·∫°n
class UserSerializer(serializers.ModelSerializer):
    password2 = serializers.CharField(write_only=True)  # X√°c nh·∫≠n m·∫≠t kh·∫©u

    class Meta:
        model = User
        fields = ['username', 'email', 'password', 'password2', 'so_dien_thoai', 'dia_chi', 'vai_tro']
        extra_kwargs = {
            'password': {'write_only': True},
            'username': {'required': True}
        }

    def validate(self, attrs):
        username = attrs.get("username")
        email = attrs.get("email")
        password = attrs.get("password")
        password2 = attrs.get("password2")

        # Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ch∆∞a
        if User.objects.filter(username=username).exists():
            raise serializers.ValidationError({"username": "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i!"})

        # Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a (n·∫øu mu·ªën email l√† duy nh·∫•t)
        if User.objects.filter(email=email).exists():
            raise serializers.ValidationError({"email": "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!"})

        # Ki·ªÉm tra m·∫≠t kh·∫©u c√≥ kh·ªõp kh√¥ng
        if password != password2:
            raise serializers.ValidationError({"password": "M·∫≠t kh·∫©u kh√¥ng kh·ªõp!"})

        try:
            validate_password(password)
        except serializers.ValidationError as e:
            raise serializers.ValidationError({"password": e.messages})

        return attrs

    def create(self, validated_data):
        validated_data.pop('password2')  # X√≥a password2 tr∆∞·ªõc khi l∆∞u

        if not validated_data.get("username"):
            validated_data["username"] = validated_data["email"].split("@")[0]  # L·∫•y ph·∫ßn tr∆∞·ªõc @ c·ªßa email l√†m username
        
        user = User.objects.create_user(**validated_data)  # T·∫°o user
        return user


# Serializer d√πng ƒë·ªÉ l·∫•y v√† c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (kh√¥ng c·∫≠p nh·∫≠t m·∫≠t kh·∫©u)
class UserUpdateSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        # Bao g·ªìm c√°c tr∆∞·ªùng b·∫°n mu·ªën cho ph√©p c·∫≠p nh·∫≠t (c√≥ th·ªÉ th√™m phone, address n·∫øu model c√≥)
        fields = ['id', 'username', 'email', 'so_dien_thoai', 'dia_chi', 'vai_tro']  # C√°c tr∆∞·ªùng c·∫ßn c·∫≠p nh·∫≠t
        extra_kwargs = {
            'username': {'required': False},  # Kh√¥ng b·∫Øt bu·ªôc khi c·∫≠p nh·∫≠t
            'email': {'required': False},     # Kh√¥ng b·∫Øt bu·ªôc khi c·∫≠p nh·∫≠t
            'so_dien_thoai': {'required': False},  # S·ªë ƒëi·ªán tho·∫°i kh√¥ng b·∫Øt bu·ªôc khi c·∫≠p nh·∫≠t
            'dia_chi': {'required': False},       # ƒê·ªãa ch·ªâ kh√¥ng b·∫Øt bu·ªôc khi c·∫≠p nh·∫≠t
            'vai_tro': {'required': False},       # Vai tr√≤ kh√¥ng b·∫Øt bu·ªôc khi c·∫≠p nh·∫≠t
        }

# Serializer d√πng cho ƒë·ªïi m·∫≠t kh·∫©u
class ChangePasswordSerializer(serializers.Serializer):
    old_password = serializers.CharField(required=True, write_only=True)
    new_password = serializers.CharField(required=True, write_only=True)
    new_password2 = serializers.CharField(required=True, write_only=True)

    def validate(self, data):
        if data['new_password'] != data['new_password2']:
            raise serializers.ValidationError("M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp!")
        return data

# ‚úÖ API c·ªßa s·∫£n ph·∫©m
class CategorySerializer(serializers.ModelSerializer):
    """‚úÖ Serializer ƒë·ªÉ qu·∫£n l√Ω danh m·ª•c s·∫£n ph·∫©m"""
    
    class Meta:
        model = Category
        fields = ['id', 'ten_danh_muc', 'mo_ta', 'ngay_tao']
        extra_kwargs = {
            'ten_danh_muc': {'required': True},  # B·∫Øt bu·ªôc nh·∫≠p t√™n danh m·ª•c
            'mo_ta': {'required': False}  # M√¥ t·∫£ kh√¥ng b·∫Øt bu·ªôc
        }

    def validate_ten_danh_muc(self, value):
        """üî¥ Kh√¥ng cho ph√©p t√™n danh m·ª•c tr√πng l·∫∑p"""
        if Category.objects.filter(ten_danh_muc=value).exists():
            raise serializers.ValidationError("Danh m·ª•c n√†y ƒë√£ t·ªìn t·∫°i!")
        return value
    
# ------------------------------------------------------

# ‚úÖ Serializer cho s·∫£n ph·∫©m (Product)
class ProductSerializer(serializers.ModelSerializer):
    danh_muc = serializers.StringRelatedField(read_only=True)  
    danh_muc_id = serializers.PrimaryKeyRelatedField(queryset=Category.objects.all(), write_only=True)
    ton_kho_thuc_te = serializers.SerializerMethodField()
    gia = serializers.IntegerField(required=True)
    so_luong = serializers.IntegerField(required=True)
    gia_sau_giam = serializers.SerializerMethodField()
    is_out_of_stock = serializers.SerializerMethodField()  # ‚úÖ Th√™m tr∆∞·ªùng ki·ªÉm tra h·∫øt h√†ng

    class Meta:
        model = Product
        fields = [
            'id', 'ten_san_pham', 'mo_ta', 'gia', 'giam_gia', 'gia_sau_giam',
            'so_luong', 'kich_co', 'mau_sac', 'thuong_hieu', 'chat_lieu', 
            'gioi_tinh', 'hinh_anh', 'danh_muc', 'danh_muc_id', 'ton_kho_thuc_te',
            'is_out_of_stock'  # ‚úÖ Th√™m v√†o danh s√°ch fields
        ]

    def get_ton_kho_thuc_te(self, obj):
        """ T√≠nh t·ªìn kho th·ª±c t·∫ø (tr·ª´ s·ªë l∆∞·ª£ng ƒë√£ ƒë·∫∑t h√†ng) """
        reserved_quantity = CartItem.objects.filter(san_pham=obj).aggregate(Sum('so_luong'))['so_luong__sum'] or 0
        return obj.so_luong - reserved_quantity

    def get_is_out_of_stock(self, obj):
        """ Ki·ªÉm tra s·∫£n ph·∫©m c√≥ h·∫øt h√†ng kh√¥ng """
        return self.get_ton_kho_thuc_te(obj) <= 0  # ‚úÖ H·∫øt h√†ng khi s·ªë l∆∞·ª£ng <= 0

    def get_gia_sau_giam(self, obj):
        """T√≠nh gi√° sau gi·∫£m."""
        return obj.gia - (obj.gia * obj.giam_gia / 100) if obj.giam_gia else obj.gia

    def validate_gia(self, value):
        if value <= 0:
            raise serializers.ValidationError("Gi√° s·∫£n ph·∫©m ph·∫£i l·ªõn h∆°n 0.")
        return value

    def validate_so_luong(self, value):
        if value < 0:
            raise serializers.ValidationError("S·ªë l∆∞·ª£ng s·∫£n ph·∫©m kh√¥ng th·ªÉ √¢m.")
        return value

    def create(self, validated_data):
        danh_muc = validated_data.pop('danh_muc_id')
        if not danh_muc:
            raise serializers.ValidationError({"danh_muc_id": "Danh m·ª•c s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc."})
        
        return Product.objects.create(danh_muc=danh_muc, **validated_data)

    def update(self, instance, validated_data):
        instance.ten_san_pham = validated_data.get('ten_san_pham', instance.ten_san_pham)
        instance.mo_ta = validated_data.get('mo_ta', instance.mo_ta)
        instance.gia = validated_data.get('gia', instance.gia)
        instance.giam_gia = validated_data.get('giam_gia', instance.giam_gia)
        instance.so_luong = validated_data.get('so_luong', instance.so_luong)

        danh_muc = validated_data.get('danh_muc_id', None)
        if danh_muc:
            instance.danh_muc = danh_muc

        instance.save()
        return instance

#-----------------------------------------------------------

class CartItemSerializer(serializers.ModelSerializer):
    san_pham = ProductSerializer(read_only=True)

    class Meta:
        model = CartItem
        fields = ['id', 'gio_hang', 'san_pham', 'so_luong']
        extra_kwargs = {
            'gio_hang': {'read_only': True},
        }

class CartSerializer(serializers.ModelSerializer):
    san_pham_id = serializers.PrimaryKeyRelatedField(
        queryset=Product.objects.all(), write_only=True
    )
    so_luong = serializers.IntegerField(write_only=True, default=1)
    items = CartItemSerializer(many=True, read_only=True, source='cart_items')
    total_quantity = serializers.SerializerMethodField()

    class Meta:
        model = Cart
        fields = ['id', 'nguoi_dung', 'san_pham_id', 'so_luong', 'items', 'total_quantity']
        extra_kwargs = {
            'nguoi_dung': {'read_only': True}
        }

    def get_total_quantity(self, obj):
        return sum(item.so_luong for item in obj.cart_items.all())

    def create(self, validated_data):
        user = self.context['request'].user
        san_pham = validated_data.pop('san_pham_id')
        so_luong = validated_data.pop('so_luong', 1)

        # L·∫•y ho·∫∑c t·∫°o gi·ªè h√†ng
        gio_hang, _ = Cart.objects.get_or_create(nguoi_dung=user)
        cart_item, created = CartItem.objects.get_or_create(
            gio_hang=gio_hang, san_pham=san_pham,
            defaults={'so_luong': so_luong}
        )

        if not created:
            cart_item.so_luong += so_luong
            cart_item.save()

        return gio_hang

    def update(self, instance, validated_data):
        user = self.context['request'].user
        san_pham = validated_data.get('san_pham_id')
        so_luong = validated_data.get('so_luong', 1)

        # Ki·ªÉm tra gi·ªè h√†ng c·ªßa user
        gio_hang = Cart.objects.filter(nguoi_dung=user).first()
        if not gio_hang:
            raise serializers.ValidationError({"detail": "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i."})

        # Ki·ªÉm tra s·∫£n ph·∫©m trong gi·ªè h√†ng
        try:
            cart_item = CartItem.objects.get(gio_hang=gio_hang, san_pham=san_pham)
        except CartItem.DoesNotExist:
            raise serializers.ValidationError({"san_pham_id": "S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng."})

        # X√≥a n·∫øu s·ªë l∆∞·ª£ng <= 0
        if so_luong <= 0:
            cart_item.delete()
            return gio_hang  

        # C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
        cart_item.so_luong = so_luong
        cart_item.save()
        
        return gio_hang


# ƒë∆°n h√†ng
# ‚úÖ Serializer Chi ti·∫øt s·∫£n ph·∫©m trong ƒë∆°n h√†ng
class OrderItemSerializer(serializers.ModelSerializer):
    san_pham = serializers.StringRelatedField()  # üëà Hi·ªÉn th·ªã t√™n s·∫£n ph·∫©m thay v√¨ ID

    class Meta:
        model = OrderItem
        fields = ['id', 'san_pham', 'so_luong', 'gia']
        read_only_fields = ['id']

class OrderSerializer(serializers.ModelSerializer):
    total_amount = serializers.DecimalField(source="tong_tien", max_digits=10, decimal_places=2, read_only=True)
    status = serializers.CharField(source="trang_thai", read_only=True)
    status_display = serializers.CharField(source="get_trang_thai_display", read_only=True)  # ‚úÖ Hi·ªÉn th·ªã tr·∫°ng th√°i th√¢n thi·ªán
    order_items = OrderItemSerializer(many=True, read_only=True)

    class Meta:
        model = Order
        fields = [
            'id',
            'total_amount',
            'status',
            'status_display',  # ‚úÖ Th√™m tr∆∞·ªùng n√†y ƒë·ªÉ hi·ªÉn th·ªã d·∫°ng text
            'phuong_thuc_tt',
            'phuong_thuc_online',
            'transaction_id',
            'created_at',
            'order_items'
        ]


class CreateOrderSerializer(serializers.ModelSerializer):
    class Meta:
        model = Order
        fields = ['id', 'nguoi_dung', 'tong_gia', 'phuong_thuc_tt', 'trang_thai', 'ngay_tao']
        read_only_fields = ['id', 'nguoi_dung', 'tong_gia', 'trang_thai', 'ngay_tao']

    def create(self, validated_data):
        user = self.context['request'].user
        cart_items = CartItem.objects.filter(nguoi_dung=user)
        
        if not cart_items.exists():
            raise serializers.ValidationError("Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.")
        
        # T√≠nh t·ªïng gi√° tr·ªã ƒë∆°n h√†ng
        tong_gia = sum(item.san_pham.get_final_price() * item.so_luong for item in cart_items)
        
        # T·∫°o ƒë∆°n h√†ng
        order = Order.objects.create(nguoi_dung=user, tong_gia=tong_gia, **validated_data)
        
        # T·∫°o OrderItem v√† c·∫≠p nh·∫≠t t·ªìn kho
        for item in cart_items:
            OrderItem.objects.create(
                don_hang=order,
                san_pham=item.san_pham,
                so_luong=item.so_luong,
                gia=item.san_pham.get_final_price()
            )
            
            # C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho
            item.san_pham.so_luong -= item.so_luong
            item.san_pham.save()
        
        # X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
        cart_items.delete()
        
        return order



#-----------------------------------
class PaymentSerializer(serializers.ModelSerializer):
    order_id = serializers.IntegerField(source='order.id')  # Tr·∫£ v·ªÅ ID c·ªßa ƒë∆°n h√†ng li√™n quan
    payment_method_display = serializers.CharField(source='get_payment_method_display')  # Hi·ªÉn th·ªã t√™n ph∆∞∆°ng th·ª©c thanh to√°n
    status_display = serializers.CharField(source='get_status_display')  # Hi·ªÉn th·ªã t√™n tr·∫°ng th√°i thanh to√°n

    class Meta:
        model = Payment
        fields = ['id', 'order_id', 'payment_method', 'payment_method_display', 'status', 'status_display', 'transaction_id', 'created_at']

