from django.contrib.auth import get_user_model
from rest_framework.views import APIView
from rest_framework import status
from .models import Payment
from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework import generics, serializers, permissions, viewsets
from rest_framework.permissions import AllowAny, IsAuthenticated, IsAuthenticatedOrReadOnly
from rest_framework.response import Response
from .models import Cart, CartItem, Product, Category, Order, Payment, OrderItem
from .serializers import ProductSerializer, CartItemSerializer, UserSerializer, CategorySerializer,OrderSerializer, CreateOrderSerializer, PaymentSerializer
from django_filters.rest_framework import DjangoFilterBackend  # ‚úÖ B·ªô l·ªçc theo tr∆∞·ªùng
from rest_framework import filters  # ‚úÖ B·ªô l·ªçc t√¨m ki·∫øm, s·∫Øp x·∫øp
from rest_framework.exceptions import PermissionDenied
from rest_framework.permissions import IsAuthenticated, IsAdminUser
from rest_framework_simplejwt.tokens import RefreshToken
from django.shortcuts import redirect, get_object_or_404
from django.contrib.auth.models import User
from django.contrib.auth import login, authenticate
from django.contrib.auth.forms import AuthenticationForm
from .serializers import CartSerializer, ChangePasswordSerializer
from django.db import transaction
import logging, requests
from rest_framework_simplejwt.authentication import JWTAuthentication
from rest_framework.permissions import IsAuthenticated
from rest_framework.decorators import api_view, permission_classes
from django.db.models import Sum , F
from django.contrib.auth.decorators import login_required
from django.contrib import messages
import uuid
from .serializers import UserUpdateSerializer
from decimal import Decimal


User = get_user_model()  # L·∫•y model User ƒë√∫ng
# Kh·ªüi t·∫°o logger
logger = logging.getLogger(__name__)

from django.shortcuts import render

def profile_view(request):
    return render(request, "profile.html", {"user": request.user})

def cart_view(request):
    return render(request, 'cart.html')


def productall_view(request):
    return render(request, 'product.html') 


def contact_view(request):
    return render(request, 'contact.html')


def sales_view(request):
    top_discount_products = Product.objects.order_by('-giam_gia')[:2]
    print("üîç D·ªØ li·ªáu s·∫£n ph·∫©m:", top_discount_products) 
    return render(request, 'newsp.html', {'top_discount_products': top_discount_products})


@api_view(['GET'])
def get_order_history(request):
    # L·∫•y t·∫•t c·∫£ c√°c ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p
    orders = Order.objects.filter(nguoi_dung=request.user)
    serializer = OrderSerializer(orders, many=True)
    return Response(serializer.data)

# ‚úÖ Trang ch·ªß

def home_view(request):
    products = Product.objects.all()  # L·∫•y danh s√°ch s·∫£n ph·∫©m
    username = request.user.username if request.user.is_authenticated else None  # L·∫•y username n·∫øu c√≥

    return render(request, 'home.html', {'username': username, 'products': products})

def login_view(request):
    if request.method == 'POST':
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            # ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
            user = form.get_user()
            login(request, user)
            # Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang ch·ªß
            return redirect('home')  # Thay 'home' b·∫±ng t√™n URL trang ch·ªß c·ªßa b·∫°n
    else:
        form = AuthenticationForm()

    return render(request, 'login.html', {'form': form})

# ‚úÖ Trang ƒëƒÉng k√Ω
def register_view(request):
    return render(request, 'register.html')

def product_detail(request, pk):
    # L·∫•y s·∫£n ph·∫©m theo ID
    product = Product.objects.get(id=pk)
    return render(request, 'product_detail.html', {'product': product})

# ‚úÖ API ƒêƒÉng k√Ω t√†i kho·∫£n
class RegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    permission_classes = [AllowAny]
    serializer_class = UserSerializer

# ‚úÖ API ƒêƒÉng nh·∫≠p l·∫•y JWT Token

class LoginView(APIView):
    def post(self, request, *args, **kwargs):
        username = request.data.get("username")
        password = request.data.get("password")
        user = authenticate(request, username=username, password=password)

        if user is not None:
            # ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng v√† t·∫°o JWT token
            refresh = RefreshToken.for_user(user)
            access_token = str(refresh.access_token)
            refresh_token = str(refresh)

            return Response({
                'access': access_token,
                'refresh': refresh_token,
                'username': user.username
            })

        return Response({"detail": "Invalid credentials"}, status=400)
    
# API l·∫•y v√† c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
class UserInfoView(APIView):
    permission_classes = [IsAuthenticated]

    # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    def get(self, request):
        user = request.user
        serializer = UserUpdateSerializer(user)  # Chuy·ªÉn th√¥ng tin ng∆∞·ªùi d√πng th√†nh JSON
        return Response(serializer.data)  # Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng

    # C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
    def put(self, request):
        user = request.user
        serializer = UserUpdateSerializer(user, data=request.data, partial=True)  # Ch·ªâ c·∫≠p nh·∫≠t nh·ªØng tr∆∞·ªùng c√≥ trong request

        if serializer.is_valid():
            serializer.save()  # L∆∞u th√¥ng tin ƒë√£ c·∫≠p nh·∫≠t
            return Response(serializer.data, status=status.HTTP_200_OK)
        
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
# API ƒë·ªïi m·∫≠t kh·∫©u
class ChangePasswordView(APIView):
    permission_classes = [IsAuthenticated]

    def put(self, request):
        user = request.user
        serializer = ChangePasswordSerializer(data=request.data)
        if serializer.is_valid():
            old_password = serializer.validated_data.get("old_password")
            if not user.check_password(old_password):
                return Response({"old_password": ["M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng."]}, status=status.HTTP_400_BAD_REQUEST)
            new_password = serializer.validated_data.get("new_password")
            user.set_password(new_password)
            user.save()
            return Response({"detail": "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng."})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
# -------------------------------------------------------

class CategoryViewSet(viewsets.ModelViewSet):
    """‚úÖ API CRUD cho Danh M·ª•c S·∫£n Ph·∫©m"""
    
    queryset = Category.objects.all().order_by('-ngay_tao')
    serializer_class = CategorySerializer
    permission_classes = [IsAuthenticatedOrReadOnly]  # Ai c≈©ng xem ƒë∆∞·ª£c, ch·ªâ admin m·ªõi ch·ªânh s·ª≠a

    def perform_create(self, serializer):
        """‚úÖ Ch·ªâ admin m·ªõi ƒë∆∞·ª£c th√™m danh m·ª•c"""
        if not self.request.user.is_staff:
            raise serializers.ValidationError({"error": "B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m danh m·ª•c!"})
        serializer.save()

    def perform_update(self, serializer):
        """‚úÖ Ch·ªâ admin m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t danh m·ª•c"""
        if not self.request.user.is_staff:
            raise serializers.ValidationError({"error": "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a danh m·ª•c!"})
        serializer.save()

    def perform_destroy(self, instance):
        """‚úÖ Ch·ªâ admin m·ªõi ƒë∆∞·ª£c x√≥a danh m·ª•c"""
        if not self.request.user.is_staff:
            raise serializers.ValidationError({"error": "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a danh m·ª•c!"})
        instance.delete()


# ‚úÖ API products

# ‚úÖ API Danh S√°ch & Th√™m S·∫£n Ph·∫©m
class ProductListCreateView(generics.ListCreateAPIView):
    queryset = Product.objects.all().order_by('-ngay_tao')  # S·∫Øp x·∫øp s·∫£n ph·∫©m m·ªõi nh·∫•t
    serializer_class = ProductSerializer
    permission_classes = [IsAuthenticatedOrReadOnly]

    # üîé B·ªô l·ªçc t√¨m ki·∫øm
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    
    # C·∫≠p nh·∫≠t filterset_fields ƒë·ªÉ bao g·ªìm 'thuong_hieu' v√† 'danh_muc'
    filterset_fields = ['danh_muc', 'gioi_tinh', 'kich_co', 'mau_sac', 'thuong_hieu']  # 'thuong_hieu' cho h√£ng v√† 'danh_muc' cho th·ªÉ lo·∫°i

    search_fields = ['ten_san_pham', 'mo_ta', 'thuong_hieu']  # T√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m, m√¥ t·∫£ v√† h√£ng s·∫£n xu·∫•t
    ordering_fields = ['gia', 'ten_san_pham', 'ngay_tao']

    def create(self, request, *args, **kwargs):
        """ ‚úÖ Ch·ªâ admin m·ªõi c√≥ quy·ªÅn th√™m s·∫£n ph·∫©m """
        if not request.user.is_staff:
            raise PermissionDenied("B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m s·∫£n ph·∫©m.")
        return super().create(request, *args, **kwargs)


# ‚úÖ API Xem / C·∫≠p nh·∫≠t / X√≥a s·∫£n ph·∫©m
# C·∫•u h√¨nh logging
logger = logging.getLogger(__name__)

class ProductDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    permission_classes = [IsAuthenticatedOrReadOnly]

    def get_object(self):
        """ L·∫•y s·∫£n ph·∫©m v√† t√≠nh to√°n t·ªìn kho th·ª±c t·∫ø """
        product = super().get_object()

        # L·∫•y t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒëang trong gi·ªè h√†ng
        reserved_quantity = CartItem.objects.filter(san_pham=product).aggregate(Sum('so_luong'))['so_luong__sum'] or 0

        # T·ªìn kho th·ª±c t·∫ø
        product.ton_kho_thuc_te = max(0, product.so_luong - reserved_quantity)

        return product

    def update(self, request, *args, **kwargs):
        """ 
        ‚úÖ Admin c√≥ th·ªÉ ch·ªânh s·ª≠a t·∫•t c·∫£
        ‚úÖ Nh√¢n vi√™n ch·ªâ c√≥ th·ªÉ ch·ªânh s·ª≠a gi√° v√† m√¥ t·∫£
        ‚ùå Ng∆∞·ªùi d√πng th∆∞·ªùng kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a
        """
        product = self.get_object()
        
        if request.user.is_superuser:
            logger.info(f"Admin {request.user.username} ƒë√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m: {product.ten_san_pham}")
            return super().update(request, *args, **kwargs)

        if request.user.is_staff:
            allowed_fields = ["gia", "mo_ta"]
            data = request.data.copy()

            for field in data.keys():
                if field not in allowed_fields:
                    raise PermissionDenied(f"B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a tr∆∞·ªùng '{field}'.")

            logger.info(f"Nh√¢n vi√™n {request.user.username} ƒë√£ c·∫≠p nh·∫≠t gi√°/m√¥ t·∫£ s·∫£n ph·∫©m: {product.ten_san_pham}")
            return super().update(request, *args, **kwargs)

        raise PermissionDenied("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a s·∫£n ph·∫©m n√†y.")

    def destroy(self, request, *args, **kwargs):
        """ ‚úÖ Ch·ªâ admin m·ªõi c√≥ quy·ªÅn x√≥a s·∫£n ph·∫©m """
        product = self.get_object()

        if not request.user.is_superuser:
            raise PermissionDenied("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a s·∫£n ph·∫©m.")

        logger.warning(f"Admin {request.user.username} ƒë√£ x√≥a s·∫£n ph·∫©m: {product.ten_san_pham}")
        return super().destroy(request, *args, **kwargs)
    
# Frontend chi ti·∫øt s·∫£n ph·∫©m (s·ª≠ d·ª•ng ƒë·ªÉ render HTML)
def product_detail(request, pk):
    product = get_object_or_404(Product, id=pk)

    # ‚úÖ T√≠nh t·ªïng s·ªë l∆∞·ª£ng ƒëang gi·ªØ trong gi·ªè h√†ng c·ªßa t·∫•t c·∫£ user
    so_luong_giu_trong_gio = CartItem.objects.filter(san_pham=product).aggregate(total=Sum('so_luong'))['total'] or 0

    # ‚úÖ T·ªìn kho th·ª±c t·∫ø
    ton_kho_thuc_te = product.so_luong - so_luong_giu_trong_gio

    return render(request, 'product_detail.html', {'product': product, 'ton_kho_thuc_te': ton_kho_thuc_te})
#---------------------------------------------------------

# ‚úÖ API Xem gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
class CartDetailView(generics.RetrieveAPIView):
    serializer_class = CartSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        print("Request user:", self.request.user)  # Debug
        cart, _ = Cart.objects.get_or_create(nguoi_dung=self.request.user)
        return cart

    
# API xem, t·∫°o, c·∫≠p nh·∫≠t, x√≥a gi·ªè h√†ng
class CartViewSet(viewsets.ModelViewSet):
    queryset = Cart.objects.all()
    serializer_class = CartSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return Cart.objects.filter(nguoi_dung=self.request.user)
    
# API th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
class AddToCartView(generics.CreateAPIView):
    serializer_class = CartSerializer
    permission_classes = [IsAuthenticated]

    def create(self, request, *args, **kwargs):
        cart, _ = Cart.objects.get_or_create(nguoi_dung=request.user)
        product_id = request.data.get('san_pham_id')
        so_luong = int(request.data.get('so_luong', 1))

        if so_luong <= 0:
            return Response({"error": "S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0!"}, status=status.HTTP_400_BAD_REQUEST)

        if not product_id:
            return Response({"error": "Thi·∫øu product_id"}, status=status.HTTP_400_BAD_REQUEST)

        try:
            with transaction.atomic():  # üî• ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë·ªìng b·ªô
                product = Product.objects.select_for_update().get(id=product_id)

                # Ki·ªÉm tra t·ªìn kho
                if product.so_luong < so_luong:
                    return Response({"error": "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m kh√¥ng ƒë·ªß trong kho!"}, status=status.HTTP_400_BAD_REQUEST)

                # T√≠nh gi√° sau gi·∫£m
                gia_sau_giam = product.gia - (product.gia * product.giam_gia / 100)

                # Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
                cart_item, created = CartItem.objects.get_or_create(
                    gio_hang=cart, san_pham=product,
                    defaults={"so_luong": so_luong, "gia_sau_giam": gia_sau_giam}
                )

                if not created:
                    if cart_item.so_luong + so_luong > product.so_luong:
                        return Response({"error": "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong kho kh√¥ng ƒë·ªß!"}, status=status.HTTP_400_BAD_REQUEST)
                    
                    cart_item.so_luong += so_luong
                    cart_item.save()

                # C·∫≠p nh·∫≠t t·ªìn kho
                product.so_luong -= so_luong
                product.save()

            return Response({
                "message": "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng.",
                "san_pham": product.ten_san_pham,
                "gia_sau_giam": gia_sau_giam,
                "so_luong_trong_gio": cart_item.so_luong,
                "ton_kho_con_lai": product.so_luong,
            }, status=status.HTTP_201_CREATED)

        except Product.DoesNotExist:
            return Response({"error": "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i."}, status=status.HTTP_404_NOT_FOUND)

class CreateOrderView(generics.CreateAPIView):
    serializer_class = CreateOrderSerializer
    permission_classes = [IsAuthenticated]

    def create(self, request, *args, **kwargs):
        user = request.user
        phuong_thuc_tt = request.data.get("phuong_thuc_tt", "cod")
        phuong_thuc_online = request.data.get("phuong_thuc_online", None)
        item_data = request.data.get("items")  # ‚úÖ L·∫•y t·ª´ request body

        if not item_data:
            return Response({"error": "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c ch·ªçn!"}, status=400)

        item_ids = [int(item["san_pham_id"]) for item in item_data]  # ‚úÖ L·∫•y danh s√°ch ID t·ª´ request body
        cart_items = CartItem.objects.filter(
            gio_hang__nguoi_dung=user, san_pham__id__in=item_ids
        ).select_related("san_pham")

        if not cart_items.exists():
            return Response({"error": "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng!"}, status=400)
                                                                                    

        # ‚úÖ Ki·ªÉm tra t·ªìn kho
        product_map = {item.san_pham.id: item.san_pham for item in cart_items}
        for item in cart_items:
            if item.so_luong > item.san_pham.so_luong:
                return Response({"error": f"S·∫£n ph·∫©m {item.san_pham.ten_san_pham} kh√¥ng ƒë·ªß h√†ng!"}, status=400)

        with transaction.atomic():
            # ‚úÖ T·∫°o ƒë∆°n h√†ng
            transaction_id = f'PAY_{uuid.uuid4().hex.upper()}'
            order = Order.objects.create(
                nguoi_dung=user,
                tong_tien=0,  # C·∫≠p nh·∫≠t sau
                phuong_thuc_tt=phuong_thuc_tt,
                phuong_thuc_online=phuong_thuc_online if phuong_thuc_tt == "online" else None,
                transaction_id=transaction_id,
            )

            # ‚úÖ T·∫°o danh s√°ch OrderItem
            order_items = []
            total_price = 0

            for item in cart_items:
                san_pham = product_map[item.san_pham.id]
                gia_san_pham = san_pham.get_final_price()
                so_luong = item.so_luong

                # ‚úÖ T·∫°o OrderItem
                order_items.append(OrderItem(
                    don_hang_id=order.id,
                    san_pham=san_pham,
                    so_luong=so_luong,
                    gia=gia_san_pham,
                ))

                total_price += gia_san_pham * so_luong

                # ‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho
                san_pham.so_luong -= so_luong
                san_pham.so_luong_ban += so_luong

            # ‚úÖ Bulk insert OrderItem
            OrderItem.objects.bulk_create(order_items)

            # ‚úÖ C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ƒë∆°n h√†ng
            order.tong_tien = total_price
            order.save()

            # ‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
            Product.objects.bulk_update(product_map.values(), ["so_luong", "so_luong_ban"])

            # ‚úÖ X√≥a s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn kh·ªèi gi·ªè h√†ng
            cart_items.delete()

            # ‚úÖ N·∫øu gi·ªè h√†ng tr·ªëng, x√≥a lu√¥n gi·ªè h√†ng
            if not CartItem.objects.filter(gio_hang__nguoi_dung=user).exists():
                Cart.objects.filter(nguoi_dung=user).delete()

        return Response({
            "message": "ƒê·∫∑t h√†ng th√†nh c√¥ng!",
            "order_id": order.id,
            "transaction_id": order.transaction_id,
            "tong_tien": order.tong_tien,
        }, status=201)

# ‚úÖ API Xem danh s√°ch ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng
class UserOrderListView(generics.ListAPIView):
    serializer_class = OrderSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return Order.objects.filter(nguoi_dung=self.request.user).order_by('-created_at')


# ‚úÖ API Xem chi ti·∫øt m·ªôt ƒë∆°n h√†ng
class OrderDetailView(generics.RetrieveAPIView):
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return Order.objects.filter(nguoi_dung=self.request.user)

# ‚úÖ API H·ªßy ƒë∆°n h√†ng (Ch·ªâ khi ƒë∆°n h√†ng ch∆∞a giao)
class CancelOrderView(generics.UpdateAPIView):
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return Order.objects.filter(nguoi_dung=self.request.user, trang_thai='Cho_xac_nhan')

    def update(self, request, *args, **kwargs):
        """ ‚úÖ H·ªßy ƒë∆°n h√†ng m√† kh√¥ng c·∫ßn g·ª≠i d·ªØ li·ªáu """
        instance = self.get_object()  # ‚úÖ L·∫•y ƒë∆°n h√†ng t·ª´ database
        instance.trang_thai = 'Da_huy'
        instance.save()
        return Response({"message": "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng."}, status=200)

# ‚úÖ API X√≥a ƒê∆°n H√†ng (Ch·ªâ khi ƒë√£ h·ªßy)
class DeleteOrderView(generics.DestroyAPIView):
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        """ ‚úÖ L·∫•y danh s√°ch ƒë∆°n h√†ng ƒë√£ h·ªßy c·ªßa ng∆∞·ªùi d√πng """
        return Order.objects.filter(nguoi_dung=self.request.user, trang_thai='Da_huy')

    def destroy(self, request, *args, **kwargs):
        """ ‚úÖ Ki·ªÉm tra tr·∫°ng th√°i tr∆∞·ªõc khi x√≥a """
        instance = self.get_object()
        
        if instance.trang_thai != 'Da_huy':
            return Response({"error": "Ch·ªâ c√≥ th·ªÉ x√≥a ƒë∆°n h√†ng ƒë√£ h·ªßy!"}, status=400)
        
        instance.delete()
        return Response({"message": "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng."}, status=200)

class UpdateCartItemView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    def put(self, request, *args, **kwargs):
        try:
            cart_item_id = kwargs.get("pk")  # L·∫•y ID s·∫£n ph·∫©m t·ª´ URL
            cart_item = CartItem.objects.get(id=cart_item_id, gio_hang__nguoi_dung=request.user)
  # Ch·ªâ c·∫≠p nh·∫≠t s·∫£n ph·∫©m c·ªßa ch√≠nh user ƒë√≥
            
            data = request.data  # D·ªØ li·ªáu t·ª´ frontend
            serializer = CartItemSerializer(cart_item, data=data, partial=True)

            if serializer.is_valid():
                serializer.save()
                return Response({"message": "C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng", "data": serializer.data}, status=200)
            
            return Response(serializer.errors, status=400)
        except CartItem.DoesNotExist:
            return Response({"error": "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng!"}, status=404)

# API X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
class RemoveFromCartView(generics.DestroyAPIView):
    serializer_class = CartItemSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return CartItem.objects.filter(gio_hang__nguoi_dung=self.request.user)

    def perform_destroy(self, instance):
        # Ho√†n l·∫°i s·ªë l∆∞·ª£ng s·∫£n ph·∫©m v√†o kho
        instance.san_pham.so_luong += instance.so_luong
        instance.san_pham.save()
        instance.delete()

#-------------------------------------------

# ‚úÖ API Thanh to√°n ƒë∆°n h√†ng
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def process_payment(request):
    user = request.user
    print("User:", user)  # Ki·ªÉm tra user c√≥ ƒë∆∞·ª£c x√°c th·ª±c kh√¥ng
    return Response({"message": "Thanh to√°n th√†nh c√¥ng!"})

def pay_view(request):
    if request.method == "GET":
        selected_ids = request.GET.get("items", "").split(",")
        selected_items = CartItem.objects.filter(id__in=filter(str.isdigit, selected_ids))
        
        if not selected_items.exists():
            messages.error(request, "Kh√¥ng c√≥ s·∫£n ph·∫©m h·ª£p l·ªá trong gi·ªè h√†ng!")
            return render(request, "pay.html", {"selected_items": []})

        tong_gia = sum(item.san_pham.gia * (1 - (item.san_pham.giam_gia or 0) / 100) * item.so_luong for item in selected_items)

        return render(request, "pay.html", {"selected_items": selected_items, "tong_gia": tong_gia})

    elif request.method == "POST":
        if not request.user.is_authenticated:
            messages.error(request, "B·∫°n c·∫ßn ph·∫£i ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thanh to√°n.")
            return redirect('login')

        payment_method = request.POST.get("Payment.PaymentMethod")
        selected_items = CartItem.objects.filter(id__in=filter(str.isdigit, request.POST.getlist("selected_items")))

        if not selected_items.exists():
            messages.error(request, "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong gi·ªè h√†ng!")
            return render(request, "pay.html", {"selected_items": []})

        with transaction.atomic():
            order = Order.objects.create(nguoi_dung=request.user, tong_tien=0, phuong_thuc_tt=payment_method)
            tong_gia = sum(
                (item.san_pham.gia * (1 - (item.san_pham.giam_gia or 0) / 100)) * item.so_luong
                for item in selected_items if item.san_pham.so_luong >= item.so_luong
            )

            if tong_gia == 0:
                messages.error(request, "M·ªôt ho·∫∑c nhi·ªÅu s·∫£n ph·∫©m kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng!")
                return render(request, "pay.html", {"selected_items": selected_items})

            for item in selected_items:
                OrderItem.objects.create(san_pham=item.san_pham, so_luong=item.so_luong, gia=item.san_pham.gia, don_hang=order)

            order.tong_tien = tong_gia
            order.save()

            Payment.objects.create(order=order, payment_method=payment_method, status=Payment.PaymentStatus.SUCCESS, transaction_id=f"PAY_{order.id}_{payment_method.upper()}")
            order.trang_thai = "Da_thanh_toan"
            order.save()

        messages.success(request, "Thanh to√°n th√†nh c√¥ng!")
        return redirect('order-list')


class PaymentView(APIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]

    def post(self, request):
        user = request.user
        order_ids = request.data.get("don_hang_ids", [])
        payment_method = request.data.get("phuong_thuc_tt", "")

        if not order_ids or not isinstance(order_ids, list):
            return Response({"error": "Danh s√°ch ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá!"}, status=status.HTTP_400_BAD_REQUEST)

        with transaction.atomic():
            orders = Order.objects.filter(id__in=order_ids, nguoi_dung=user)
            
            if orders.filter(payment__status="Thanh_cong").exists():
                return Response({"error": "ƒê∆°n h√†ng n√†y ƒë√£ ƒë∆∞·ª£c thanh to√°n!"}, status=status.HTTP_400_BAD_REQUEST)

            for order in orders:
                total_amount = round(Decimal(sum(item.gia * item.so_luong for item in order.order_items.all())), 2)
                order.tong_tien = total_amount
                order.save()
                
                # N·∫øu thanh to√°n COD th√¨ tr·∫°ng th√°i Payment l√† "cho_xac_nhan"
                payment_status = "cho_xac_nhan" if payment_method.lower() == "cod" else Payment.PaymentStatus.SUCCESS

                # T·∫°o b·∫£n ghi thanh to√°n
                Payment.objects.create(
                    order=order, 
                    payment_method=payment_method, 
                    status=payment_status,  # C·∫≠p nh·∫≠t tr·∫°ng th√°i Payment
                    transaction_id=f"PAY_{order.id}_{payment_method.upper()}"
                )
                
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
                order.trang_thai = "dang_xu_ly"
                order.save()

        return Response({"message": "Thanh to√°n th√†nh c√¥ng!"}, status=status.HTTP_201_CREATED)

class UserPaymentListView(generics.ListAPIView):
    serializer_class = PaymentSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return Payment.objects.filter(order__nguoi_dung=self.request.user)


# ‚úÖ API Xem chi ti·∫øt thanh to√°n
class PaymentDetailView(generics.RetrieveAPIView):
    serializer_class = PaymentSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return Payment.objects.filter(order__nguoi_dung=self.request.user)  # S·ª≠ d·ª•ng 'order' thay v√¨ 'don_hang'

class CancelPaymentView(generics.UpdateAPIView):
    serializer_class = PaymentSerializer
    permission_classes = [IsAdminUser]

    def get_queryset(self):
        return Payment.objects.all()

    def perform_update(self, serializer):
        instance = serializer.instance

        # S·ª≠ d·ª•ng Payment.PaymentStatus ƒë·ªÉ so s√°nh tr·∫°ng th√°i thanh to√°n
        if instance.status == Payment.PaymentStatus.FAILED:
            return Response({"error": "Thanh to√°n n√†y ƒë√£ b·ªã h·ªßy tr∆∞·ªõc ƒë√≥!"}, status=400)

        if instance.status == Payment.PaymentStatus.SUCCESS:
            return Response({"error": "Kh√¥ng th·ªÉ h·ªßy thanh to√°n ƒë√£ th√†nh c√¥ng!"}, status=400)

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
        instance.status = Payment.PaymentStatus.FAILED
        instance.save()

        logger.info(f"‚ùå Thanh to√°n {instance.id} b·ªã h·ªßy b·ªüi admin!")

        return Response(
            {"message": "Thanh to√°n ƒë√£ b·ªã h·ªßy th√†nh c√¥ng!", "payment": PaymentSerializer(instance).data},
            status=200
        )

