let allProducts = []; // L∆∞u danh s√°ch s·∫£n ph·∫©m ƒë·ªÉ l·ªçc m√† kh√¥ng c·∫ßn g·ªçi API l·∫°i

async function fetchProducts() {
    try {
        const response = await fetch("/api/products/");
        allProducts = await response.json();

        renderProducts(allProducts);
        loadFilterOptions(allProducts);

        // Sau khi t·∫£i s·∫£n ph·∫©m, √°p d·ª•ng b·ªô l·ªçc n·∫øu ƒë√£ c√≥ gi√° tr·ªã tr∆∞·ªõc ƒë√≥
        applyFilters();
    } catch (error) {
        console.error("L·ªói khi t·∫£i s·∫£n ph·∫©m:", error);
    }
}
function renderProducts(products) {
    console.log("S·∫£n ph·∫©m sau khi l·ªçc:", products); // Ki·ªÉm tra danh s√°ch s·∫£n ph·∫©m
    const productList = document.getElementById("product-list");
    productList.innerHTML = "";

    if (products.length === 0) {
        productList.innerHTML = `<p class="text-center text-danger">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.</p>`;
        return;
    }

    products.forEach((product) => {
        // Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ b·ªã ·∫©n kh√¥ng
        if (product.hidden || product.so_luong === 0) {
            console.warn("S·∫£n ph·∫©m b·ªã ·∫©n:", product);
            return; // B·ªè qua s·∫£n ph·∫©m n√†y
        }

        // T√≠nh gi√° sau gi·∫£m
        const giaGoc = product.gia;
        const giamGia = product.giam_gia || 0; // N·∫øu kh√¥ng c√≥ gi·∫£m gi√° th√¨ m·∫∑c ƒë·ªãnh l√† 0
        const giaSauGiam = giaGoc - (giaGoc * giamGia / 100);

        const productCard = document.createElement("div");
        productCard.classList.add("col-md-4");
        productCard.innerHTML = `
            <div class="card mb-3">
                <img src="${product.hinh_anh}" class="card-img-top" alt="${product.ten_san_pham}">
                <div class="card-body">
                    <h5 class="card-title">${product.ten_san_pham}</h5>
                    <!-- Hi·ªÉn th·ªã gi√° v√† gi·∫£m gi√° -->
                    ${giamGia > 0 
                        ? `<p class="text-danger"><del>${giaGoc.toLocaleString()} VND</del> <strong>${giaSauGiam.toLocaleString()} VND</strong></p>
                           <p class="badge bg-success">Gi·∫£m ${giamGia}%</p>` 
                        : `<p>${giaGoc.toLocaleString()} VND</p>`}
                        
                    <p class="text-muted">üì¶ T·ªìn kho: <strong>${product.so_luong}</strong></p>
                    
                    <a href="/products/${product.id}/" class="btn btn-detail">Chi Ti·∫øt</a>
                    <button class="btn btn-primary" onclick="addToCart(${product.id})">üõí Th√™m v√†o gi·ªè h√†ng</button>
                </div>
            </div>
        `;
        productList.appendChild(productCard);
    });
}

// üåü Th√™m debounce ƒë·ªÉ tr√°nh spam API
function debounce(func, delay) {
    let timer;
    return function () {
        clearTimeout(timer);
        timer = setTimeout(() => func(), delay);
    };
}

const applyFilters = debounce(() => {
    let filteredProducts = [...allProducts]; // Clone danh s√°ch s·∫£n ph·∫©m

    const searchQuery = document.getElementById("search-input").value.toLowerCase();
    const category = document.getElementById("category-filter").value;
    const brand = document.getElementById("brand-filter").value;
    const minPrice = parseFloat(document.getElementById("min-price").value);
    const maxPrice = parseFloat(document.getElementById("max-price").value);
    const sortOption = document.getElementById("sort-filter").value;

    // üîç L·ªçc theo t·ª´ kh√≥a
    if (searchQuery) {
        filteredProducts = filteredProducts.filter((p) =>
            p.ten_san_pham.toLowerCase().includes(searchQuery)
        );
    }

    // üìå L·ªçc theo danh m·ª•c
    if (category) {
        filteredProducts = filteredProducts.filter(p => p.danh_muc === category);
    }

    // üî• L·ªçc theo th∆∞∆°ng hi·ªáu
    if (brand) {
        filteredProducts = filteredProducts.filter(p => p.thuong_hieu === brand);
    }

    // üí∞ L·ªçc theo kho·∫£ng gi√°
    if (!isNaN(minPrice)) {
        filteredProducts = filteredProducts.filter(p => p.gia >= minPrice);
    }
    if (!isNaN(maxPrice)) {
        filteredProducts = filteredProducts.filter(p => p.gia <= maxPrice);
    }

    // üîÑ S·∫Øp x·∫øp s·∫£n ph·∫©m
    if (sortOption === "price-asc") {
        filteredProducts.sort((a, b) => a.gia - b.gia);
    } else if (sortOption === "price-desc") {
        filteredProducts.sort((a, b) => b.gia - a.gia);
    } else if (sortOption === "newest") {
        filteredProducts.sort((a, b) => new Date(b.ngay_tao) - new Date(a.ngay_tao));
    }

    renderProducts(filteredProducts);
}, 500);

// üéØ Load danh m·ª•c & th∆∞∆°ng hi·ªáu v√†o select box
function loadFilterOptions(products) {
    const categories = [...new Set(products.map(p => p.danh_muc))];
    const brands = [...new Set(products.map(p => p.thuong_hieu))];

    const categorySelect = document.getElementById("category-filter");
    const brandSelect = document.getElementById("brand-filter");

    categorySelect.innerHTML = `<option value="">T·∫•t c·∫£</option>`;
    brandSelect.innerHTML = `<option value="">T·∫•t c·∫£</option>`;

    categories.forEach(category => {
        categorySelect.innerHTML += `<option value="${category}">${category}</option>`;
    });

    brands.forEach(brand => {
        brandSelect.innerHTML += `<option value="${brand}">${brand}</option>`;
    });
}

// S·ª± ki·ªán thay ƒë·ªïi b·ªô l·ªçc
document.getElementById("search-input").addEventListener("input", applyFilters);
document.getElementById("category-filter").addEventListener("change", applyFilters);
document.getElementById("brand-filter").addEventListener("change", applyFilters);
document.getElementById("min-price").addEventListener("input", applyFilters);
document.getElementById("max-price").addEventListener("input", applyFilters);
document.getElementById("sort-filter").addEventListener("change", applyFilters);

document.addEventListener("DOMContentLoaded", fetchProducts);
